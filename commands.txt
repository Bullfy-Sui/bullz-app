# BULLFY SMART CONTRACT CLI COMMANDS
# Package addresses (update these with actual deployed addresses)
# BULLFY_PACKAGE=0x7e075aab8c116002d9752533fb4b088d00fecd0d92af21c739bc130ec8c8b915

# ADMIN_CAP=0x0ea4dfedafa66e3c497ee3f59aeed0e394efe928c67cfae2a16021ca6bffcda4

# OWNER_CAP=0x414172886f5b8b5542898889d2511888b66ccfb2f8f87338cd104765c936540f

# MATCH_SIGNER_CAP=0x[UPDATE_WITH_DEPLOYED_SIGNER_CAP_ID]

# SIGNER_REGISTRY=0x[UPDATE_WITH_DEPLOYED_SIGNER_REGISTRY_ID]

# FEES_OBJECT=0xc0bc733204e2780d52c95824317c39bd7c27b258a69ee4e790b28c8434af36e8

# SQUAD_REGISTRY=0xe353bc046de5f2de7ea5000a8f59666fe62103a2baade6b114b8d47fa6c2e373

# FEE_CONFIG=0x3353c9785c5d0d39d85d5c9cb43a15e1d2d408092d6eec629f71c529f28d8fc4

# ESCROW_REGISTRY=0x47c5dda0d0408c09e77aff50394e94695e537ad318223ed582aede51ad8aaeb2

# ACTIVE_SQUAD_REGISTRY=0xa4350b6044afa48ed4969c56caedf7e4fede956d8afd5e1bc6be7e5a5cbfa0c3

# =============================================================================
# ADMIN MODULE COMMANDS
# =============================================================================

# Create a new admin capability
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function create_admin_cap \
  --args $OWNER_CAP $NEW_ADMIN_ADDRESS \
  --gas-budget 100000000

# Revoke admin capability
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function revoke_admin_cap \
  --args $OWNER_CAP $ADMIN_CAP_TO_REVOKE $ADMIN_ADDRESS \
  --gas-budget 100000000

# Transfer owner capability
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function transfer_owner_cap \
  --args $OWNER_CAP $NEW_OWNER_ADDRESS \
  --gas-budget 100000000

# Update fee percentage (0-1000 basis points, i.e., 0-10%)
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function update_fee_percentage \
  --args $ADMIN_CAP $FEE_CONFIG 500 \
  --gas-budget 100000000

# Update squad creation fee (in MIST, 1 SUI = 1_000_000_000 MIST)
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function update_squad_creation_fee \
  --args $ADMIN_CAP $FEE_CONFIG 1000000000 \
  --gas-budget 100000000

# Update revival fees (standard_fee, instant_fee in MIST)
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function update_revival_fees \
  --args $ADMIN_CAP $FEE_CONFIG 50000000 100000000 \
  --gas-budget 100000000

# =============================================================================
# MATCH SIGNER MODULE COMMANDS
# =============================================================================

# Create a new match signer capability (admin only)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function create_match_signer \
  --args $ADMIN_CAP $SIGNER_REGISTRY $BACKEND_SERVICE_ADDRESS 0x6 \
  --gas-budget 100000000

# Create a new match signer capability using owner cap (for initial setup)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function create_match_signer_with_owner \
  --args $OWNER_CAP $SIGNER_REGISTRY $BACKEND_SERVICE_ADDRESS 0x6 \
  --gas-budget 100000000

# Revoke a match signer capability (admin only)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function revoke_match_signer \
  --args $ADMIN_CAP $SIGNER_REGISTRY $MATCH_SIGNER_CAP_TO_REVOKE 0x6 \
  --gas-budget 100000000

# Revoke a match signer capability using owner cap
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function revoke_match_signer_with_owner \
  --args $OWNER_CAP $SIGNER_REGISTRY $MATCH_SIGNER_CAP_TO_REVOKE 0x6 \
  --gas-budget 100000000

# Deactivate signer (signer can deactivate themselves)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function deactivate_signer \
  --args $MATCH_SIGNER_CAP 0x6 \
  --gas-budget 100000000

# Reactivate signer (signer can reactivate themselves)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function reactivate_signer \
  --args $MATCH_SIGNER_CAP 0x6 \
  --gas-budget 100000000

# =============================================================================
# SQUAD MANAGER MODULE COMMANDS
# =============================================================================

# Create a new squad (without name - name will be set when adding players)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_manager \
  --function create_squad \
  --args $SQUAD_REGISTRY $FEE_CONFIG $FEES_OBJECT $COIN_OBJECT \
  --gas-budget 100000000

# Add players to existing squad and set squad name (exactly 7 players required)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_manager \
  --function add_players_to_squad \
  --args $SQUAD_REGISTRY 1 "My Squad Name" '["Player1", "Player2", "Player3", "Player4", "Player5", "Player6", "Player7"]' \
  --gas-budget 100000000

# =============================================================================
# COMPLETE SQUAD CREATION FLOW (Using PTB - Recommended)
# =============================================================================

# Create squad and add players in a single transaction using PTB
# This is the recommended approach as it completes the entire squad setup atomically
sui client ptb \
  --gas-budget 200000000 \
  --move-call $BULLFY_PACKAGE::squad_manager::create_squad $SQUAD_REGISTRY $FEE_CONFIG $FEES_OBJECT $COIN_OBJECT \
  --move-call $BULLFY_PACKAGE::squad_manager::add_players_to_squad $SQUAD_REGISTRY $NEXT_SQUAD_ID "My Squad Name" '["Player1", "Player2", "Player3", "Player4", "Player5", "Player6", "Player7"]'

# Note: Replace $NEXT_SQUAD_ID with the expected next squad ID (check current next_squad_id in SquadRegistry)
# You can query the next squad ID first:
# sui client object $SQUAD_REGISTRY --json | jq '.content.fields.next_squad_id'

# Revive squad using standard method (after 24 hours)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_manager \
  --function revive_squad_standard \
  --args $SQUAD_REGISTRY $FEE_CONFIG $FEES_OBJECT 1 $COIN_OBJECT 0x6 \
  --gas-budget 100000000

# Revive squad instantly (immediate)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_manager \
  --function revive_squad_instant \
  --args $SQUAD_REGISTRY $FEE_CONFIG $FEES_OBJECT 1 $COIN_OBJECT 0x6 \
  --gas-budget 100000000

# Delete a squad
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_manager \
  --function delete_squad \
  --args $SQUAD_REGISTRY 1 \
  --gas-budget 100000000

# =============================================================================
# MATCH ESCROW MODULE COMMANDS
# =============================================================================

# Create a bid for 1v1 match
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_escrow \
  --function create_bid \
  --args $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEE_CONFIG 1 1000000000 300000 $COIN_OBJECT 0x6 \
  --gas-budget 100000000

# Match two bids together (requires MatchSignerCap) - now includes token prices
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_escrow \
  --function match_bids \
  --args $MATCH_SIGNER_CAP $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $BID1_ID $BID2_ID '[1000000, 2000000, 1500000, 3000000, 2500000, 1800000, 2200000]' '[1100000, 1900000, 1600000, 2900000, 2400000, 1700000, 2100000]' 0x6 \
  --gas-budget 100000000

# Cancel a bid
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_escrow \
  --function cancel_bid \
  --args $ESCROW_REGISTRY $ACTIVE_SQUAD_REGISTRY $BID_ID \
  --gas-budget 100000000

# Complete a match by declaring winner (requires MatchSignerCap) - now includes final token prices
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_escrow \
  --function complete_match \
  --args $MATCH_SIGNER_CAP $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $MATCH_ID $WINNER_ADDRESS '[1050000, 2100000, 1550000, 3100000, 2550000, 1850000, 2250000]' '[1150000, 1950000, 1650000, 2950000, 2450000, 1750000, 2150000]' 0x6 \
  --gas-budget 100000000

# Claim prize from completed match (requires MatchSignerCap)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_escrow \
  --function claim_prize \
  --args $MATCH_SIGNER_CAP $ESCROW_REGISTRY $FEES_OBJECT $MATCH_ID \
  --gas-budget 100000000

# =============================================================================
# MATCH COMPLETION FLOW (Using PTB - Recommended for Backend Services)
# =============================================================================

# Complete match and claim prize in a single transaction using PTB
# This is the recommended approach for backend services to complete and claim atomically
# Note: Token prices should be provided as vectors representing the 7 squad players' token prices
sui client ptb \
  --gas-budget 200000000 \
  --move-call $BULLFY_PACKAGE::match_escrow::complete_match $MATCH_SIGNER_CAP $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $MATCH_ID $WINNER_ADDRESS '[1050000, 2100000, 1550000, 3100000, 2550000, 1850000, 2250000]' '[1150000, 1950000, 1650000, 2950000, 2450000, 1750000, 2150000]' 0x6 \
  --move-call $BULLFY_PACKAGE::match_escrow::claim_prize $MATCH_SIGNER_CAP $ESCROW_REGISTRY $FEES_OBJECT $MATCH_ID

# Backend automation flow: Match bids, complete match, and claim prize in sequence
# This is useful for automated backend services handling the full match lifecycle
sui client ptb \
  --gas-budget 300000000 \
  --move-call $BULLFY_PACKAGE::match_escrow::match_bids $MATCH_SIGNER_CAP $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $BID1_ID $BID2_ID '[1000000, 2000000, 1500000, 3000000, 2500000, 1800000, 2200000]' '[1100000, 1900000, 1600000, 2900000, 2400000, 1700000, 2100000]' 0x6 \
  --move-call $BULLFY_PACKAGE::match_escrow::complete_match $MATCH_SIGNER_CAP $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $MATCH_ID $WINNER_ADDRESS '[1050000, 2100000, 1550000, 3100000, 2550000, 1850000, 2250000]' '[1150000, 1950000, 1650000, 2950000, 2450000, 1750000, 2150000]' 0x6 \
  --move-call $BULLFY_PACKAGE::match_escrow::claim_prize $MATCH_SIGNER_CAP $ESCROW_REGISTRY $FEES_OBJECT $MATCH_ID

# =============================================================================
# SQUAD PLAYER CHALLENGE MODULE COMMANDS
# =============================================================================

# Create a new challenge (multiplayer tournament)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function create_challenge \
  --args $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEE_CONFIG 1 1000000000 4 1774518152000 3600000 $COIN_OBJECT 0x6 \
  --gas-budget 100000000

# Join an existing challenge
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function join_challenge \
  --args $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEE_CONFIG $CHALLENGE_OBJECT 2 $COIN_OBJECT 0x6 \
  --gas-budget 100000000

# Start a challenge (when scheduled time arrives)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function start_challenge \
  --args $CHALLENGE_OBJECT 0x6 \
  --gas-budget 100000000

# Complete a challenge (declare winner)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function complete_challenge \
  --args $ADMIN_CAP $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEES_OBJECT $CHALLENGE_OBJECT $WINNER_ADDRESS 0x6 \
  --gas-budget 100000000

# Cancel a challenge (before it starts)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function cancel_challenge \
  --args $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEES_OBJECT $CHALLENGE_OBJECT 0x6 \
  --gas-budget 100000000

# Expire a challenge (after scheduled start time with insufficient participants)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function expire_challenge \
  --args $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEES_OBJECT $CHALLENGE_OBJECT 0x6 \
  --gas-budget 100000000

# =============================================================================
# CHALLENGE COMPLETION FLOW (Using PTB - Recommended for Tournaments)
# =============================================================================

# Complete challenge and handle all cleanup in a single transaction using PTB
# This ensures atomic completion of tournament with proper fund distribution
sui client ptb \
  --gas-budget 200000000 \
  --move-call $BULLFY_PACKAGE::squad_player_challenge::complete_challenge $ADMIN_CAP $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEES_OBJECT $CHALLENGE_OBJECT $WINNER_ADDRESS 0x6

# Create and join challenge in a single transaction (for quick setup)
# Useful when you want to immediately join your own created challenge
sui client ptb \
  --gas-budget 300000000 \
  --move-call $BULLFY_PACKAGE::squad_player_challenge::create_challenge $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEE_CONFIG 1 1000000000 4 1774518152000 3600000 $COIN_OBJECT1 0x6 \
  --move-call $BULLFY_PACKAGE::squad_player_challenge::join_challenge $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEE_CONFIG $CHALLENGE_OBJECT 2 $COIN_OBJECT2 0x6

# Cancel challenge with immediate refund processing
sui client ptb \
  --gas-budget 200000000 \
  --move-call $BULLFY_PACKAGE::squad_player_challenge::cancel_challenge $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEES_OBJECT $CHALLENGE_OBJECT 0x6

# Note: For create+join PTB, you need to know the challenge object ID that will be generated
# Consider using separate transactions if you need to inspect the challenge object first

# =============================================================================
# FEE COLLECTOR MODULE COMMANDS
# =============================================================================

# Withdraw specific amount from fees (admin only - automatically sends to admin address)
sui client call \
  --package 0x7e075aab8c116002d9752533fb4b088d00fecd0d92af21c739bc130ec8c8b915 \
  --module fee_collector \
  --function withdraw \
  --args 0x0ea4dfedafa66e3c497ee3f59aeed0e394efe928c67cfae2a16021ca6bffcda4 0xc0bc733204e2780d52c95824317c39bd7c27b258a69ee4e790b28c8434af36e8 1000000000 \
  --gas-budget 100000000

# Withdraw all fees (admin only - automatically sends to admin address)
sui client call \
  --package 0x7e075aab8c116002d9752533fb4b088d00fecd0d92af21c739bc130ec8c8b915 \
  --module fee_collector \
  --function withdraw_all \
  --args 0x0ea4dfedafa66e3c497ee3f59aeed0e394efe928c67cfae2a16021ca6bffcda4 0xc0bc733204e2780d52c95824317c39bd7c27b258a69ee4e790b28c8434af36e8 \
  --gas-budget 100000000

# =============================================================================
# NOTES AND PARAMETER EXPLANATIONS
# =============================================================================
# 
# COMMON PARAMETERS:
# - squad_id: Numeric ID of the squad (e.g., 1, 2, 3...)
# - bid_amount: Amount in MIST (1 SUI = 1_000_000_000 MIST)
# - duration: Duration in milliseconds (60000-1800000 = 1-30 minutes)
# - scheduled_start_time: Unix timestamp in milliseconds
# - max_participants: Maximum number of participants in challenge
# - coin_object_id: ID of SUI coin object for payment
# - clock_object_id: Sui system clock object ID (always 0x6)
#
# OBJECT IDs TO UPDATE:
# - Replace all $VARIABLE placeholders with actual deployed object IDs
# - Get these IDs from deployment or network explorer
# - Common objects: AdminCap, OwnerCap, MatchSignerCap, SignerRegistry, SquadRegistry, FeeConfig, etc.
#
# PERMISSIONS:
# - Admin functions require AdminCap ownership
# - Owner functions require OwnerCap ownership
# - Match operations require MatchSignerCap ownership (match_bids, complete_match, claim_prize)
# - Regular functions require squad ownership or participation rights
#
# MATCH SIGNER CAPABILITIES:
# - MatchSignerCap provides limited permissions for backend automation
# - Can match bids, complete matches, and claim prizes
# - Cannot perform other admin functions (fee updates, squad management, etc.)
# - Must be created by admin or owner, can be revoked at any time
# - Signers can temporarily deactivate/reactivate themselves
#
# MODULE NAMES (CORRECT):
# - bullfy::squad_manager (NOT bullfy::bullfy)
# - bullfy::match_escrow
# - bullfy::match_signer (NEW)
# - bullfy::admin
# - bullfy::fee_collector
# - bullfy::squad_player_challenge
#
# TIME VALIDATION:
# - complete_match function now requires match time to have ended
# - Use clock object (0x6) for time-based validations
# - Match durations are enforced between 1-30 minutes
#
# BID REQUIREMENTS:
# - Minimum bid amount: 1_000_000 MIST (0.001 SUI)
# - Duration limits: 60_000 to 1_800_000 milliseconds (1-30 minutes)
# - Squad must be alive and not already active in another challenge
#
# SQUAD REQUIREMENTS:
# - Must add exactly 7 players when calling add_players_to_squad
# - Squad creation requires fee payment
# - Revival has two options: standard (24h wait) or instant (higher fee)
#
# BACKEND AUTOMATION SETUP:
# 1. Deploy contracts and get object IDs
# 2. Create MatchSignerCap for your backend service address
# 3. Backend service can now automate: bid matching → match completion → prize claiming
# 4. Monitor events and use query functions to track match states
# 5. Implement error handling for unauthorized operations