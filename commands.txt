# BULLFY SMART CONTRACT CLI COMMANDS
# Package addresses (update these with actual deployed addresses)
# BULLFY_PACKAGE=0xf72df0e7b01581cda48d783e5862e72c9ffb437a22c90d230e0f01fd1081819f

# ADMIN_CAP=0x0ea4dfedafa66e3c497ee3f59aeed0e394efe928c67cfae2a16021ca6bffcda4

# OWNER_CAP=0x772d1fd3435c578aaeec79b3fd62370b2e56fe18b413eda87c848d3c1f0591a3

# ADMIN_REGISTRY=0x8694b1fdf73505d0eb5e716f9dc5e74cbc2679ccce04a339f323c40078b46ec6

# MATCH_SIGNER_CAP=0x[UPDATE_WITH_DEPLOYED_SIGNER_CAP_ID]

# SIGNER_REGISTRY=0xfbe4079e3ee9648df043ca7370ed9d667f1f8688482387cd5e6b7ea954913145

# FEES_OBJECT=0x291afb572ac99e06e14a8f1835bcdb0907cef5fcfafe6f2b7bc01d15d0f650d1

# SQUAD_REGISTRY=0xb16793c134eee41f3e73da2ab409dbbafd5cb9d437bef7c2a0588e422e668b06

# FEE_CONFIG=0x00d6076c80f10a8eea80b0a8c7e0333ad6e634d0e3a1fddea9a6f9db064ac614

# ESCROW_REGISTRY=0x825fef203d842b927419cedf68392d5031b7205c4652d055e2de9f2ad80ec84d

# ACTIVE_SQUAD_REGISTRY=0x8033ec1e8e15e189bb10e55a3c29a3daf20c34b695c461666a409cb77e14ca5d

# USER_STATS_REGISTRY=0x[UPDATE_WITH_DEPLOYED_USER_STATS_REGISTRY_ID]

# =============================================================================
# ADMIN MODULE COMMANDS
# =============================================================================

# Create a new admin capability (owner only)
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function create_admin_cap \
  --args $OWNER_CAP $ADMIN_REGISTRY $NEW_ADMIN_ADDRESS 0x6 \
  --gas-budget 100000000

# Revoke admin capability (owner only)
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function revoke_admin_cap \
  --args $OWNER_CAP $ADMIN_REGISTRY $ADMIN_CAP_TO_REVOKE 0x6 \
  --gas-budget 100000000

# Deactivate admin (admin can deactivate themselves)
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function deactivate_admin \
  --args $ADMIN_CAP 0x6 \
  --gas-budget 100000000

# Reactivate admin (admin can reactivate themselves)
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function reactivate_admin \
  --args $ADMIN_CAP 0x6 \
  --gas-budget 100000000

# Transfer owner capability
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function transfer_owner_cap \
  --args $OWNER_CAP $NEW_OWNER_ADDRESS \
  --gas-budget 100000000

# Update fee percentage (0-1000 basis points, i.e., 0-10%) - now requires active AdminCap
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function update_fee_percentage \
  --args $ADMIN_CAP $FEE_CONFIG 300 \
  --gas-budget 100000000

# Update squad creation fee (in MIST, 1 SUI = 1_000_000_000 MIST) - now requires active AdminCap
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function update_squad_creation_fee \
  --args $ADMIN_CAP $FEE_CONFIG 10000000000 \
  --gas-budget 100000000

# Update revival fees (standard_fee, instant_fee in MIST) - now requires active AdminCap
sui client call \
  --package $BULLFY_PACKAGE \
  --module admin \
  --function update_revival_fees \
  --args $ADMIN_CAP $FEE_CONFIG 50000000 100000000 \
  --gas-budget 100000000

# =============================================================================
# MATCH SIGNER MODULE COMMANDS
# =============================================================================

# Create a new match signer capability (admin only)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function create_match_signer \
  --args $ADMIN_CAP $SIGNER_REGISTRY $BACKEND_SERVICE_ADDRESS 0x6 \
  --gas-budget 100000000

# Create a new match signer capability using owner cap (for initial setup)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function create_match_signer_with_owner \
  --args $OWNER_CAP $SIGNER_REGISTRY $BACKEND_SERVICE_ADDRESS 0x6 \
  --gas-budget 100000000

# Revoke a match signer capability (admin only)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function revoke_match_signer \
  --args $ADMIN_CAP $SIGNER_REGISTRY $MATCH_SIGNER_CAP_TO_REVOKE 0x6 \
  --gas-budget 100000000

# Revoke a match signer capability using owner cap
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function revoke_match_signer_with_owner \
  --args $OWNER_CAP $SIGNER_REGISTRY $MATCH_SIGNER_CAP_TO_REVOKE 0x6 \
  --gas-budget 100000000

# Deactivate signer (signer can deactivate themselves)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function deactivate_signer \
  --args $MATCH_SIGNER_CAP 0x6 \
  --gas-budget 100000000

# Reactivate signer (signer can reactivate themselves)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_signer \
  --function reactivate_signer \
  --args $MATCH_SIGNER_CAP 0x6 \
  --gas-budget 100000000

# =============================================================================
# SQUAD MANAGER MODULE COMMANDS
# =============================================================================

# Create a new squad (without name - name will be set when adding players)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_manager \
  --function create_squad \
  --args $SQUAD_REGISTRY $FEE_CONFIG $FEES_OBJECT $COIN_OBJECT \
  --gas-budget 100000000

# Add players to existing squad and set squad name (exactly 7 players required)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_manager \
  --function add_players_to_squad \
  --args $SQUAD_REGISTRY 1 "My Squad Name" '["Player1", "Player2", "Player3", "Player4", "Player5", "Player6", "Player7"]' \
  --gas-budget 100000000

# =============================================================================
# COMPLETE SQUAD CREATION FLOW (Using PTB - Recommended)
# =============================================================================

# Create squad and add players in a single transaction using PTB
# This is the recommended approach as it completes the entire squad setup atomically
sui client ptb \
  --move-call $BULLFY_PACKAGE::squad_manager::create_squad $SQUAD_REGISTRY $FEE_CONFIG $FEES_OBJECT $COIN_OBJECT \
  --move-call $BULLFY_PACKAGE::squad_manager::add_players_to_squad $SQUAD_REGISTRY $NEXT_SQUAD_ID "My Squad Name" 'vector["Player1", "Player2", "Player3", "Player4", "Player5", "Player6", "Player7"]'

# Note: Replace $NEXT_SQUAD_ID with the expected next squad ID (check current next_squad_id in SquadRegistry)
# You can query the next squad ID first:
# sui client object $SQUAD_REGISTRY --json | jq '.content.fields.next_squad_id'

# Revive squad using standard method (after 24 hours)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_manager \
  --function revive_squad_standard \
  --args $SQUAD_REGISTRY $FEE_CONFIG $FEES_OBJECT 1 $COIN_OBJECT 0x6 \
  --gas-budget 100000000

# Revive squad instantly (immediate)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_manager \
  --function revive_squad_instant \
  --args $SQUAD_REGISTRY $FEE_CONFIG $FEES_OBJECT 1 $COIN_OBJECT 0x6 \
  --gas-budget 100000000

# Delete a squad
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_manager \
  --function delete_squad \
  --args $SQUAD_REGISTRY 1 \
  --gas-budget 100000000

# =============================================================================
# MATCH ESCROW MODULE COMMANDS (Updated with math_utils integration)
# =============================================================================

# Create a bid for 1v1 match
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_escrow \
  --function create_bid \
  --args $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEE_CONFIG 1 100000000 300000 $COIN_OBJECT 0x6 \
  --gas-budget 100000000

# Match two bids together (requires MatchSignerCap) - includes token prices for performance tracking
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_escrow \
  --function match_bids \
  --args $MATCH_SIGNER_CAP $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $BID1_ID $BID2_ID 'vector[1000000, 2000000, 1500000, 3000000, 2500000, 1800000, 2200000]' 'vector[1100000, 1900000, 1600000, 2900000, 2400000, 1700000, 2100000]' 0x6 \
  --gas-budget 100000000

# Cancel a bid
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_escrow \
  --function cancel_bid \
  --args $ESCROW_REGISTRY $ACTIVE_SQUAD_REGISTRY $BID_ID \
  --gas-budget 100000000

# Complete a match by declaring winner (requires MatchSignerCap) - includes final token prices for performance calculation
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_escrow \
  --function complete_match \
  --args $MATCH_SIGNER_CAP $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $USER_STATS_REGISTRY $MATCH_ID 'vector[1050000, 2100000, 1550000, 3100000, 2550000, 1850000, 2250000]' 'vector[1150000, 1950000, 1650000, 2950000, 2450000, 1750000, 2150000]' 0x6 \
  --gas-budget 100000000

# Claim prize from completed match (requires MatchSignerCap)
sui client call \
  --package $BULLFY_PACKAGE \
  --module match_escrow \
  --function claim_prize \
  --args $MATCH_SIGNER_CAP $ESCROW_REGISTRY $FEES_OBJECT $MATCH_ID \
  --gas-budget 100000000

# =============================================================================
# MATCH COMPLETION FLOW (Using PTB - Recommended for Backend Services)
# =============================================================================

# Complete match and claim prize in a single transaction using PTB
# This is the recommended approach for backend services to complete and claim atomically
sui client ptb \
  --gas-budget 200000000 \
  --move-call $BULLFY_PACKAGE::match_escrow::complete_match $MATCH_SIGNER_CAP $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $USER_STATS_REGISTRY $MATCH_ID 'vector[1050000, 2100000, 1550000, 3100000, 2550000, 1850000, 2250000]' 'vector[1150000, 1950000, 1650000, 2950000, 2450000, 1750000, 2150000]' 0x6 \
  --move-call $BULLFY_PACKAGE::match_escrow::claim_prize $MATCH_SIGNER_CAP $ESCROW_REGISTRY $FEES_OBJECT $MATCH_ID

# Backend automation flow: Match bids, complete match, and claim prize in sequence
# This is useful for automated backend services handling the full match lifecycle
sui client ptb \
  --gas-budget 300000000 \
  --move-call $BULLFY_PACKAGE::match_escrow::match_bids $MATCH_SIGNER_CAP $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $BID1_ID $BID2_ID 'vector[1000000, 2000000, 1500000, 3000000, 2500000, 1800000, 2200000]' 'vector[1100000, 1900000, 1600000, 2900000, 2400000, 1700000, 2100000]' 0x6 \
  --move-call $BULLFY_PACKAGE::match_escrow::complete_match $MATCH_SIGNER_CAP $ESCROW_REGISTRY $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $USER_STATS_REGISTRY $MATCH_ID 'vector[1050000, 2100000, 1550000, 3100000, 2550000, 1850000, 2250000]' 'vector[1150000, 1950000, 1650000, 2950000, 2450000, 1750000, 2150000]' 0x6 \
  --move-call $BULLFY_PACKAGE::match_escrow::claim_prize $MATCH_SIGNER_CAP $ESCROW_REGISTRY $FEES_OBJECT $MATCH_ID

# =============================================================================
# SQUAD PLAYER CHALLENGE MODULE COMMANDS (Updated with math_utils integration)
# =============================================================================

# Create a new challenge (multiplayer tournament)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function create_challenge \
  --args $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEE_CONFIG 1 1000000000 4 1774518152000 3600000 $COIN_OBJECT 0x6 \
  --gas-budget 100000000

# Join an existing challenge
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function join_challenge \
  --args $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEE_CONFIG $CHALLENGE_OBJECT 2 $COIN_OBJECT 0x6 \
  --gas-budget 100000000

# Start a challenge (when scheduled time arrives) - now includes token price recording
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function start_challenge \
  --args $SIGNER_CAP $CHALLENGE_OBJECT 'vector[vector[1000000, 2000000, 1500000, 3000000, 2500000, 1800000, 2200000], vector[1100000, 1900000, 1600000, 2900000, 2400000, 1700000, 2100000]]' 0x6 \
  --gas-budget 100000000

# Complete a challenge (declare winner) - now includes final token price recording
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function complete_challenge \
  --args $SIGNER_CAP $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $USER_STATS_REGISTRY $FEES_OBJECT $CHALLENGE_OBJECT 'vector[vector[1050000, 2100000, 1550000, 3100000, 2550000, 1850000, 2250000], vector[1150000, 1950000, 1650000, 2950000, 2450000, 1750000, 2150000]]' 0x6 \
  --gas-budget 100000000

# Cancel a challenge (before it starts)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function cancel_challenge \
  --args $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEES_OBJECT $CHALLENGE_OBJECT 0x6 \
  --gas-budget 100000000

# Expire a challenge (after scheduled start time with insufficient participants)
sui client call \
  --package $BULLFY_PACKAGE \
  --module squad_player_challenge \
  --function expire_challenge \
  --args $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEES_OBJECT $CHALLENGE_OBJECT 0x6 \
  --gas-budget 100000000

# =============================================================================
# CHALLENGE COMPLETION FLOW (Using PTB - Recommended for Tournaments)
# =============================================================================

# Complete challenge and handle all cleanup in a single transaction using PTB
# This ensures atomic completion of tournament with proper fund distribution
sui client ptb \
  --gas-budget 200000000 \
  --move-call $BULLFY_PACKAGE::squad_player_challenge::complete_challenge $SIGNER_CAP $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $USER_STATS_REGISTRY $FEES_OBJECT $CHALLENGE_OBJECT 'vector[vector[1050000, 2100000, 1550000, 3100000, 2550000, 1850000, 2250000], vector[1150000, 1950000, 1650000, 2950000, 2450000, 1750000, 2150000]]' 0x6

# Create and join challenge in a single transaction (for quick setup)
# Useful when you want to immediately join your own created challenge
sui client ptb \
  --gas-budget 300000000 \
  --move-call $BULLFY_PACKAGE::squad_player_challenge::create_challenge $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEE_CONFIG 1 1000000000 4 1774518152000 3600000 $COIN_OBJECT1 0x6 \
  --move-call $BULLFY_PACKAGE::squad_player_challenge::join_challenge $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEE_CONFIG $CHALLENGE_OBJECT 2 $COIN_OBJECT2 0x6

# Cancel challenge with immediate refund processing
sui client ptb \
  --gas-budget 200000000 \
  --move-call $BULLFY_PACKAGE::squad_player_challenge::cancel_challenge $SQUAD_REGISTRY $ACTIVE_SQUAD_REGISTRY $FEES_OBJECT $CHALLENGE_OBJECT 0x6

# =============================================================================
# FEE COLLECTOR MODULE COMMANDS
# =============================================================================

# Withdraw specific amount from fees (admin only - automatically sends to admin address)
sui client call \
  --package $BULLFY_PACKAGE \
  --module fee_collector \
  --function withdraw \
  --args $ADMIN_CAP $FEES_OBJECT 1000000000 \
  --gas-budget 100000000

# Withdraw all fees (admin only - automatically sends to admin address)
sui client call \
  --package $BULLFY_PACKAGE \
  --module fee_collector \
  --function withdraw_all \
  --args $ADMIN_CAP $FEES_OBJECT \
  --gas-budget 100000000

# =============================================================================
# MATH UTILS MODULE - HELPER FUNCTIONS (View Only)
# =============================================================================

# Note: math_utils functions are internal helpers used by other modules.
# They are not directly callable via CLI as they are utility functions.
# However, you can test them in Move unit tests:

# Available math_utils functions:
# - safe_add(a: u64, b: u64): u64                    // Safe addition with overflow protection
# - safe_multiply(a: u64, b: u64): u64               // Safe multiplication with overflow protection  
# - safe_sum_vector(values: &vector<u64>): u64       // Sum vector elements safely
# - calculate_fee_amounts(base: u64, fee_bps: u64): (u64, u64)  // Calculate fee and total
# - calculate_percentage_increase(initial: u64, final: u64): u64 // Calculate % increase * 10000
# - calculate_prize_pool(bid_amount: u64): u64        // Calculate total prize (bid * 2)
# - calculate_platform_fee(base: u64, config: &FeeConfig): (u64, u64) // Platform-specific fee calc

# =============================================================================
# NOTES AND PARAMETER EXPLANATIONS (Updated for u256 Integration)
# =============================================================================
# 
# MATHEMATICAL OPERATIONS - NOW USING U256 INTERNALLY:
# - All fee calculations use u256 internally for overflow protection
# - Prize pool calculations (bid_amount * 2) are safe from overflow
# - Token sum calculations handle large token price vectors safely
# - Percentage calculations use 10000 multiplier for 0.01% precision
# - Results are safely cast back to u64 with overflow checks
#
# COMMON PARAMETERS:
# - squad_id: Numeric ID of the squad (e.g., 1, 2, 3...)
# - bid_amount: Amount in MIST (1 SUI = 1_000_000_000 MIST)
# - duration: Duration in milliseconds (60000-1800000 = 1-30 minutes)
# - scheduled_start_time: Unix timestamp in milliseconds
# - max_participants: Maximum number of participants in challenge
# - coin_object_id: ID of SUI coin object for payment
# - clock_object_id: Sui system clock object ID (always 0x6)
# - token_prices: Vector of 7 u64 values representing squad token prices
# - final_token_prices: Vector of 7 u64 values for final token prices
#
# TOKEN PRICE VECTORS:
# - Must contain exactly 7 u64 values (one per squad player)
# - Prices should be in a consistent format (e.g., fixed-point with decimals)
# - Initial and final prices are used to calculate percentage performance
# - Winner is determined by highest percentage increase
# - Example: vector[1000000, 2000000, 1500000, 3000000, 2500000, 1800000, 2200000]
#
# PERFORMANCE CALCULATION:
# - Percentage increase = ((final_sum - initial_sum) * 10000) / initial_sum
# - Results in basis points (e.g., 1500 = 15.00% increase)
# - All calculations use u256 internally to prevent overflow
# - Safe handling of edge cases (division by zero, negative changes)
#
# OBJECT IDs TO UPDATE:
# - Replace all $VARIABLE placeholders with actual deployed object IDs
# - Get these IDs from deployment or network explorer
# - New objects: USER_STATS_REGISTRY for tracking player statistics
# - Common objects: AdminCap, OwnerCap, AdminRegistry, MatchSignerCap, etc.
#
# PERMISSIONS:
# - Owner functions require OwnerCap ownership (create/revoke admins, transfer ownership)
# - Admin functions require active AdminCap ownership (fee updates, match signer management)
# - Match operations require MatchSignerCap ownership (match_bids, complete_match, claim_prize)
# - Regular functions require squad ownership or participation rights
#
# UPDATED FUNCTION SIGNATURES:
# - complete_match: Now includes USER_STATS_REGISTRY parameter for stat tracking
# - start_challenge: Now includes token price vectors parameter
# - complete_challenge: Now includes final token price vectors parameter
# - All math operations internally use u256 for safety
#
# ERROR HANDLING:
# - E_CALCULATION_OVERFLOW: Thrown when u256 calculations would overflow
# - E_RESULT_TOO_LARGE: Thrown when u256 result cannot fit in u64
# - E_DIVISION_BY_ZERO: Thrown when attempting division by zero in percentage calc
# - All existing error codes remain the same for backward compatibility
#
# MODULE NAMES (CORRECT):
# - bullfy::squad_manager
# - bullfy::match_escrow  
# - bullfy::match_signer
# - bullfy::admin
# - bullfy::fee_collector
# - bullfy::squad_player_challenge
# - bullfy::math_utils (NEW)
#
# BACKEND INTEGRATION:
# - Use the same object IDs and function calls
# - Token prices should be fetched from your price oracle
# - Math calculations are now overflow-safe internally
# - Performance tracking provides detailed analytics data
# - Events include percentage increase data for analysis
#
# TESTING RECOMMENDATIONS:
# - Test with large bid amounts to verify overflow protection
# - Test percentage calculations with edge cases (0 initial value, etc.)
# - Verify token price vector lengths (must be exactly 7)
# - Test concurrent matches to ensure proper isolation
# - Monitor gas usage - u256 operations may use slightly more gas